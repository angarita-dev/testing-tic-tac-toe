!function(e){var t={};function a(r){if(t[r])return t[r].exports;var n=t[r]={i:r,l:!1,exports:{}};return e[r].call(n.exports,n,n.exports,a),n.l=!0,n.exports}a.m=e,a.c=t,a.d=function(e,t,r){a.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},a.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},a.t=function(e,t){if(1&t&&(e=a(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(a.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)a.d(r,n,function(t){return e[t]}.bind(null,n));return r},a.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return a.d(t,"a",t),t},a.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},a.p="",a(a.s=0)}([function(e,t,a){"use strict";a.r(t);var r=class{constructor(){this.boardData=[[],[],[]]}clearBoardData(){this.boardData=[[],[],[]]}getBoardData(){return this.boardData}static indexToCoordinates(e){return[Math.floor(e/3),e%3]}getTileData(e,t){return this.boardData[e][t]}isAvailable(e,t){return void 0===this.boardData[e][t]}fillSpace(e,t,a){return!(e>2||t>2||!this.isAvailable(e,t))&&(this.boardData[e][t]=a,a)}isTie(){return 9===this.boardData.flat().filter(e=>void 0!==e).length}isWin(){let e,t,a,r,n,i;const s=(e,t,a)=>{const r=this.boardData[t][a];return void 0!==r&&((void 0===e||!(!e||e!==r))&&r)};for(e=0;e<=2;e+=1){for(a=s(a,e,e),r=s(r,e,2-e),t=0;t<=2;t+=1)if(n=s(n,e,t),i=s(i,t,e),2===t){if(n||i)return!0;n=void 0,i=void 0}if(2===e&&(a||r))return!0}return!1}};var n=class{static clearChildren(e){for(;e.hasChildNodes();)e.removeChild(e.firstChild)}static clearBoard(){const e=document.getElementById("board");let t="";for(let e=0;e<9;e+=1)t+='\n        <div class="tile"> \n        <h1 class="tile-container"></h1> \n        </div>';e.innerHTML=t}static displaySideCard(){const e=document.getElementById("side-card");e.classList.remove("slide-out"),e.classList.add("slide-in")}static displayWin(){Array.from(document.getElementsByClassName("tile-container")).forEach(e=>{e.textContent=String.fromCodePoint(127881)})}static displayReplay(e,t){const a=document.getElementById("side-card"),r=document.createElement("div");r.classList.add("replay-container");const n=document.createElement("span");n.textContent="Rematch";const i=document.createElement("span");i.textContent="New game",a.appendChild(r),r.appendChild(n),r.appendChild(i),n.classList.add("rematch-button"),n.onclick=()=>{e()},i.classList.add("restart-button"),i.onclick=()=>{t()}}static hideSideCard(){const e=document.getElementById("side-card");e.classList.remove("slide-in"),e.classList.add("slide-out")}static tileClickListener(e){const t=Array.from(document.getElementsByClassName("tile-container"));t.forEach(a=>{a.onclick=()=>{const r=t.indexOf(a);e(r)}})}static fillTile(e,t){document.getElementById("board").children[e].firstElementChild.textContent=t}static displayMessage(e){const t=document.getElementById("side-card"),a=document.createElement("h3");a.textContent=e,this.clearChildren(t),t.appendChild(a)}static displayForm(e){const t=document.getElementById("side-card");this.clearChildren(t);for(let e=1;e<=2;e+=1){const a=document.createElement("div");a.className="player-container";const r=document.createElement("input");r.className="name-input",r.id=`p${e}-name`,r.value="Player "+e;const n=document.createElement("input");n.className="char-input",n.id=`p${e}-char`,n.value=1===e?"X":"O",a.appendChild(r),a.appendChild(n),t.appendChild(a)}const a=document.createElement("span");a.id="submit-players",a.className="submit-players",a.textContent="Submit",a.onclick=()=>{const t=document.getElementById("p1-char").value,a=document.getElementById("p2-char").value;t===a||t.length>1||a.length>1||e({player1:{name:document.getElementById("p1-name").value,character:t},player2:{name:document.getElementById("p2-name").value,character:a}})},t.appendChild(a)}};new class{nextPlayer(){this.currentPlayer=this.currentPlayer===this.player1?this.player2:this.player1}setupTurn(){this.nextPlayer();const e=this.currentPlayer.name,t=this.currentPlayer.character;n.displaySideCard(),n.displayMessage(`${e}'s turn (${t})`)}handleRematch(){const e=e=>{n.hideSideCard(),this.player1=e.player1,this.player2=e.player2,this.setupTurn(),n.tileClickListener(this.executeTurn.bind(this))};n.displayReplay((()=>{n.clearBoard(),this.setupTurn(),n.tileClickListener(this.executeTurn.bind(this))}).bind(this),()=>{n.clearBoard(),n.displayForm(e)})}executeTurn(e){const[t,a]=r.indexToCoordinates(e);if(!this.board.isAvailable(t,a))return!1;const i=this.currentPlayer.character;if(this.board.fillSpace(t,a,i),n.fillTile(e,i),this.board.isWin()){const e=this.currentPlayer.name;n.displayMessage(e+" wins!"),n.displayWin(),this.board.clearBoardData(),this.handleRematch()}else this.board.isTie()?(n.displayMessage("It's a tie!"),n.clearBoard(),this.board.clearBoardData(),this.handleRematch()):this.setupTurn();return!0}constructor(){this.board=new r,this.currentPlayer={},this.player1={},this.player2={};n.displayForm(e=>{n.hideSideCard(),this.player1=e.player1,this.player2=e.player2,this.setupTurn(),n.tileClickListener(this.executeTurn.bind(this))})}}}]);